/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 15:29:37 GMT 2025
 */

package com.rems.boot.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.rems.boot.core.QueryPage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryPage_ESTest extends QueryPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-842));
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Long long0 = new Long(0L);
      queryPage0.setTotalCount(long0);
      Long long1 = queryPage0.getTotalCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      Long long0 = new Long(1L);
      queryPage0.setTotalCount(long0);
      queryPage0.getTotalCount();
      assertEquals(10, (int)queryPage0.getPageSize());
      assertEquals(1, (int)queryPage0.getPageIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Long long0 = new Long((-3038L));
      QueryPage queryPage0 = new QueryPage(integer0, integer0, long0);
      Long long1 = queryPage0.getTotalCount();
      assertEquals((-3038L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Long long0 = new Long((-3038L));
      QueryPage queryPage0 = new QueryPage(integer0, integer0, long0);
      Integer integer1 = queryPage0.getPageSize();
      assertEquals(59, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      assertEquals(10, (int)queryPage0.getPageSize());
      
      queryPage0.setPageSize((Integer) null);
      queryPage0.getPageSize();
      assertEquals(1, (int)queryPage0.getPageIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Integer integer1 = new Integer((-738));
      queryPage0.setPageSize(integer1);
      Integer integer2 = queryPage0.getPageSize();
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Integer integer1 = new Integer(1);
      queryPage0.setPageIndex(integer1);
      Integer integer2 = queryPage0.getPageIndex();
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      assertEquals(1, (int)queryPage0.getPageIndex());
      
      queryPage0.setPageIndex((Integer) null);
      queryPage0.getPageIndex();
      assertEquals(10, (int)queryPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      assertEquals(1, (int)queryPage0.getPageIndex());
      
      Integer integer0 = new Integer((-1451));
      queryPage0.setPageIndex(integer0);
      queryPage0.getPageIndex();
      assertEquals(10, (int)queryPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      queryPage0.canEqual(queryPage0);
      assertEquals(10, (int)queryPage0.getPageSize());
      assertEquals(1, (int)queryPage0.getPageIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Object object0 = new Object();
      boolean boolean0 = queryPage0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Integer integer1 = queryPage0.getPageIndex();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Long long0 = queryPage0.getTotalCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      QueryPage queryPage0 = new QueryPage(integer0, integer0, (Long) null);
      Integer integer1 = queryPage0.getPageSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(15);
      Long long0 = Long.valueOf((long) 15);
      QueryPage queryPage0 = new QueryPage(integer0, (Integer) null, long0);
      queryPage0.setPageIndex((Integer) null);
      QueryPage queryPage1 = new QueryPage((Integer) null, (Integer) null, (Long) null);
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      QueryPage queryPage1 = new QueryPage();
      assertTrue(queryPage1.equals((Object)queryPage0));
      
      Long long0 = new Long((-1L));
      queryPage1.setTotalCount(long0);
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertFalse(queryPage1.equals((Object)queryPage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      Integer integer0 = new Integer((-1451));
      queryPage0.setPageIndex(integer0);
      assertEquals(10, (int)queryPage0.getPageSize());
      
      queryPage0.setPageSize(integer0);
      Long long0 = new Long((-1451));
      queryPage0.setTotalCount(long0);
      QueryPage queryPage1 = new QueryPage(integer0, integer0, long0);
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      assertEquals(1, (int)queryPage0.getPageIndex());
      
      Integer integer0 = new Integer((-1451));
      queryPage0.setPageIndex(integer0);
      Long long0 = new Long((-1451));
      QueryPage queryPage1 = new QueryPage(integer0, integer0, long0);
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      QueryPage queryPage1 = new QueryPage();
      assertTrue(queryPage1.equals((Object)queryPage0));
      
      queryPage1.setPageSize((Integer) null);
      boolean boolean0 = queryPage1.equals(queryPage0);
      assertFalse(queryPage1.equals((Object)queryPage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      QueryPage queryPage1 = new QueryPage();
      assertTrue(queryPage1.equals((Object)queryPage0));
      
      queryPage1.setPageIndex((Integer) null);
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      queryPage0.setPageIndex((Integer) null);
      QueryPage queryPage1 = new QueryPage();
      assertFalse(queryPage1.equals((Object)queryPage0));
      
      queryPage1.setPageIndex((Integer) null);
      boolean boolean0 = queryPage1.equals(queryPage0);
      assertTrue(queryPage1.equals((Object)queryPage0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      Object object0 = new Object();
      boolean boolean0 = queryPage0.equals(object0);
      assertFalse(boolean0);
      assertEquals(10, (int)queryPage0.getPageSize());
      assertEquals(1, (int)queryPage0.getPageIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      boolean boolean0 = queryPage0.equals(queryPage0);
      assertTrue(boolean0);
      assertEquals(10, (int)queryPage0.getPageSize());
      assertEquals(1, (int)queryPage0.getPageIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      QueryPage queryPage0 = new QueryPage(integer0, (Integer) null, long0);
      queryPage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(1510);
      Long long0 = new Long(1510);
      QueryPage queryPage0 = new QueryPage((Integer) null, integer0, long0);
      queryPage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      queryPage0.hashCode();
      assertEquals(1, (int)queryPage0.getPageIndex());
      assertEquals(10, (int)queryPage0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      String string0 = queryPage0.toString();
      assertEquals("QueryPage(pageIndex=1, pageSize=10, totalCount=null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QueryPage queryPage0 = new QueryPage();
      queryPage0.setPageIndex((Integer) null);
      QueryPage queryPage1 = new QueryPage();
      boolean boolean0 = queryPage0.equals(queryPage1);
      assertEquals(10, (int)queryPage1.getPageSize());
      assertFalse(boolean0);
      assertFalse(queryPage1.equals((Object)queryPage0));
      assertEquals(1, (int)queryPage1.getPageIndex());
  }
}
