/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 15:38:43 GMT 2025
 */

package com.rems.boot.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.rems.boot.entity.CourseLearningEntity;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CourseLearningEntity_ESTest extends CourseLearningEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      MockDate mockDate0 = new MockDate(1669, 2909, 0, 0, 1);
      courseLearningEntity_CourseLearningEntityBuilder0.updateTime(mockDate0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      Date date0 = courseLearningEntity0.getUpdateTime();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 1182, 1130, 1182, 59);
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "", "", "", "", "", mockDate0, mockDate0);
      Integer integer1 = courseLearningEntity0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      Integer integer0 = new Integer(530);
      courseLearningEntity_CourseLearningEntityBuilder0.id(integer0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      Integer integer1 = courseLearningEntity0.getId();
      assertEquals(530, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      Integer integer0 = new Integer((-542));
      courseLearningEntity_CourseLearningEntityBuilder0.id(integer0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      Integer integer1 = courseLearningEntity0.getId();
      assertEquals((-542), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      Date date0 = courseLearningEntity0.getCreateTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseTitle("*Q\fNX.");
      String string0 = courseLearningEntity0.getCourseTitle();
      assertEquals("*Q\fNX.", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate();
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "b", (String) null, "3]+7-=9yZF>]>:m6V", (String) null, "3]+7-=9yZF>]>:m6V", mockDate0, mockDate0);
      assertEquals("b", courseLearningEntity0.getCourseTitle());
      
      courseLearningEntity0.setCourseTitle("");
      courseLearningEntity0.getCourseTitle();
      assertEquals("3]+7-=9yZF>]>:m6V", courseLearningEntity0.getCourseSm());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      courseLearningEntity_CourseLearningEntityBuilder0.courseSm("$x>H");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseSm();
      assertEquals("$x>H", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(326, 326, 59);
      Integer integer0 = new Integer(0);
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "_ixfoZbPHy1e'\"%W-", "", "", "", "_ixfoZbPHy1e'\"%W-", mockDate0, mockDate0);
      String string0 = courseLearningEntity0.getCourseSm();
      assertEquals("", string0);
      assertEquals("_ixfoZbPHy1e'\"%W-", courseLearningEntity0.getCourseTitle());
      assertEquals("", courseLearningEntity0.getCourseImg());
      assertEquals("_ixfoZbPHy1e'\"%W-", courseLearningEntity0.getCourseIndex());
      assertEquals("", courseLearningEntity0.getCourseContent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      courseLearningEntity_CourseLearningEntityBuilder0.courseIndex("Oy8\u0001[uf[l");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseIndex();
      assertEquals("Oy8\u0001[uf[l", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      courseLearningEntity0.setCourseIndex("");
      String string0 = courseLearningEntity0.getCourseIndex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      courseLearningEntity_CourseLearningEntityBuilder0.courseImg(">d `h7 g");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseImg();
      assertEquals(">d `h7 g", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      courseLearningEntity_CourseLearningEntityBuilder0.courseImg("");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseImg();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-2746), 0, 1792, 0);
      Integer integer0 = new Integer(0);
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "", (String) null, "X'62h\"f^NT_$iqt", "y_-m*/s|rY~ID$W |", "", mockDate0, mockDate0);
      String string0 = courseLearningEntity0.getCourseContent();
      assertNotNull(string0);
      assertEquals("X'62h\"f^NT_$iqt", courseLearningEntity0.getCourseSm());
      assertEquals("", courseLearningEntity0.getCourseTitle());
      assertEquals("y_-m*/s|rY~ID$W |", string0);
      assertEquals("", courseLearningEntity0.getCourseIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(4159);
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "", ",75", "pcw~MYZB'VO=9c", "", (String) null, (Date) null, (Date) null);
      String string0 = courseLearningEntity0.getCourseContent();
      assertEquals(",75", courseLearningEntity0.getCourseImg());
      assertEquals("", courseLearningEntity0.getCourseTitle());
      assertEquals("pcw~MYZB'VO=9c", courseLearningEntity0.getCourseSm());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      boolean boolean0 = courseLearningEntity0.canEqual(courseLearningEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      boolean boolean0 = courseLearningEntity0.canEqual(courseLearningEntity_CourseLearningEntityBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      Integer integer0 = courseLearningEntity0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseSm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(326, 326, 59);
      Integer integer0 = new Integer(0);
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity(integer0, "_ixfoZbPHy1e'\"%W-", "", "", "", "_ixfoZbPHy1e'\"%W-", mockDate0, mockDate0);
      courseLearningEntity0.getCreateTime();
      assertEquals("_ixfoZbPHy1e'\"%W-", courseLearningEntity0.getCourseTitle());
      assertEquals("", courseLearningEntity0.getCourseSm());
      assertEquals("", courseLearningEntity0.getCourseImg());
      assertEquals("", courseLearningEntity0.getCourseContent());
      assertEquals("_ixfoZbPHy1e'\"%W-", courseLearningEntity0.getCourseIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      Date date0 = courseLearningEntity0.getUpdateTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseImg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      String string0 = courseLearningEntity0.getCourseTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      String string0 = courseLearningEntity0.getCourseIndex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      MockDate mockDate0 = new MockDate();
      courseLearningEntity0.setUpdateTime(mockDate0);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setUpdateTime(mockDate0);
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      MockDate mockDate0 = new MockDate(2909, 2909, 1, 1, (-2245));
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.updateTime(mockDate0);
      CourseLearningEntity courseLearningEntity1 = courseLearningEntity_CourseLearningEntityBuilder1.build();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      MockDate mockDate0 = new MockDate(1669, 2909, 0, 0, 1);
      courseLearningEntity_CourseLearningEntityBuilder0.updateTime(mockDate0);
      CourseLearningEntity courseLearningEntity1 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      boolean boolean0 = courseLearningEntity1.equals(courseLearningEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      MockDate mockDate0 = new MockDate();
      courseLearningEntity0.setCreateTime(mockDate0);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCreateTime(mockDate0);
      boolean boolean0 = courseLearningEntity1.equals(courseLearningEntity0);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      MockDate mockDate0 = new MockDate(1669, 2909, 0, 0, 1);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCreateTime(mockDate0);
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      courseLearningEntity0.setCourseIndex("5`Wg2qjcPQzy{Z$");
      assertFalse(courseLearningEntity0.equals((Object)courseLearningEntity1));
      
      courseLearningEntity1.setCourseIndex("5`Wg2qjcPQzy{Z$");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(courseLearningEntity0.equals((Object)courseLearningEntity1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseIndex("i(< *");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity0.setCourseIndex("5`Wg2qjcPQzy{Z$");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseContent("Y9wv23~IJg1a");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseContent("<_T-mfpjR*=Z");
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseSm("^");
      CourseLearningEntity courseLearningEntity1 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseSm("3!m(2* ");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseImg("$[Gv/;'{C3TVw");
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseImg("$[Gv/;'{C3TVw");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseImg("");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseTitle("iT,])YBA[&zfb&5h$47");
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseTitle("iT,])YBA[&zfb&5h$47");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setCourseTitle(", courseIndex=");
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      Integer integer0 = new Integer(0);
      courseLearningEntity0.setId(integer0);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      courseLearningEntity1.setId(integer0);
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      
      Integer integer0 = new Integer(1);
      courseLearningEntity1.setId(integer0);
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      Object object0 = new Object();
      boolean boolean0 = courseLearningEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      MockDate mockDate0 = new MockDate(0, 530, 530, 530, (-1005));
      courseLearningEntity_CourseLearningEntityBuilder0.createTime(mockDate0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.courseContent("");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder1.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.courseImg("-");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder1.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseTitle("CourseLearningEntity(id=null, courseTitle=null, courseImg=null, courseSm=null, courseContent=null, courseIndex=null, createTime=Fri Feb 14 20:21:21 GMT 2014, updateTime=null)");
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      Integer integer0 = new Integer(530);
      courseLearningEntity_CourseLearningEntityBuilder0.id(integer0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.courseTitle(".9w(~T");
      assertSame(courseLearningEntity_CourseLearningEntityBuilder1, courseLearningEntity_CourseLearningEntityBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      String string0 = courseLearningEntity_CourseLearningEntityBuilder0.toString();
      assertEquals("CourseLearningEntity.CourseLearningEntityBuilder(id=null, courseTitle=null, courseImg=null, courseSm=null, courseContent=null, courseIndex=null, createTime=null, updateTime=null)", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      MockDate mockDate0 = new MockDate(0, 530, 530, 530, (-1005));
      courseLearningEntity_CourseLearningEntityBuilder0.updateTime(mockDate0);
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.courseIndex("");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder1.build();
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = new CourseLearningEntity.CourseLearningEntityBuilder();
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder1 = courseLearningEntity_CourseLearningEntityBuilder0.courseContent("IBr:n");
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder1.build();
      CourseLearningEntity courseLearningEntity1 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      Integer integer0 = new Integer(0);
      courseLearningEntity0.setId(integer0);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      MockDate mockDate0 = new MockDate();
      courseLearningEntity0.setCreateTime(mockDate0);
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseImg("$[Gv/;'{C3TVw");
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CourseLearningEntity.CourseLearningEntityBuilder courseLearningEntity_CourseLearningEntityBuilder0 = CourseLearningEntity.builder();
      CourseLearningEntity courseLearningEntity0 = courseLearningEntity_CourseLearningEntityBuilder0.build();
      courseLearningEntity0.setCourseSm(", courseTitle=");
      courseLearningEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      String string0 = courseLearningEntity0.toString();
      assertEquals("CourseLearningEntity(id=null, courseTitle=null, courseImg=null, courseSm=null, courseContent=null, courseIndex=null, createTime=null, updateTime=null)", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      courseLearningEntity0.setCourseTitle("iT,])YBA[&zfb&5h$47");
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      boolean boolean0 = courseLearningEntity0.equals(courseLearningEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CourseLearningEntity courseLearningEntity0 = new CourseLearningEntity();
      CourseLearningEntity courseLearningEntity1 = new CourseLearningEntity();
      courseLearningEntity0.setCourseSm("");
      assertFalse(courseLearningEntity0.equals((Object)courseLearningEntity1));
      
      courseLearningEntity1.setCourseSm("");
      boolean boolean0 = courseLearningEntity1.equals(courseLearningEntity0);
      assertTrue(courseLearningEntity1.equals((Object)courseLearningEntity0));
      assertTrue(boolean0);
  }
}
